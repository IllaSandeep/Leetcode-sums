//https://leetcode.com/problems/maximum-profit-in-job-scheduling/?envType=daily-question&envId=2024-01-06
class Solution {
public:
    int f(int n,vector<vector<int>>&ans,vector<int>&startTime,vector<int>&dp){
        if(n>=startTime.size()) return 0;
        if(dp[n]!=-1){
            return dp[n];
        }
        int l=lower_bound(startTime.begin(),startTime.end(),ans[n][1])-startTime.begin();
        int pick=ans[n][2]+f(l,ans,startTime,dp);
        int nonpick=f(n+1,ans,startTime,dp);
        return dp[n]=max(pick,nonpick);

    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        vector<vector<int>>ans;
        for(int i=0;i<profit.size();i++){
            ans.push_back({startTime[i],endTime[i],profit[i]});
        }
        vector<int>dp(startTime.size()+1,-1);
        sort(ans.begin(),ans.end());
        sort(startTime.begin(),startTime.end());
        return f(0,ans,startTime,dp);
    }
};
